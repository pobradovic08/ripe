#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# RIPE stats - Reverse DNS consistency
#
# Copyright (C) 2017  Pavle Obradovic (pajaja)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import urllib.request
import urllib.error
import argparse
import json
import re
from colorama import init, Fore, Back, Style


def print_request_info():
    """
    Display info about API request/response
    :return:
    """
    global data

    print(Style.DIM)
    print("=" * 80)
    print("Request information:")
    print(" {:20s}: {:s}".format("Server ID", data['server_id']))
    print(" {:20s}: {:s}".format("Version", data['version']))
    print(" {:20s}: {:s}".format("Time:", data['time']))
    print(" {:20s}: {:s}".format("Query ID", data['query_id']))
    if data['cached']:
        print(Fore.LIGHTYELLOW_EX + "\n Request is cached!" + Fore.RESET)
    print(Style.RESET_ALL)


def print_prefix_info(prefixes):
    """
    Compare prefixes announced via BGP and route object created in RIPE DB.
    :return:
    """
    global data

    print("=" * 80)
    print(Style.BRIGHT + Back.BLUE, "{:78s}".format("PREFIXES"), Style.RESET_ALL)

    if not len(data['data']['prefixes']):
        print("-" * 80)
        print("No prefixes.")
        print("=" * 80)
        return

    print("-" * 80)
    print("-" * 80)
    for prefix in prefixes:
        if prefixes[prefix]['complete']:
            print("{:s}{:40s}{:s}All domains ({:d}) OK{:s}".format(
               Style.BRIGHT,
               prefix,
               Style.NORMAL + Fore.LIGHTGREEN_EX,
               len(prefixes[prefix]['domains']),
               Fore.WHITE
            ))
        else:
            print("{:s}{:s}{:s}:".format(Style.BRIGHT, prefix, Style.RESET_ALL))
            for domain in prefixes[prefix]['domains']:
                if domain['found']:
                    color = Fore.GREEN
                else:
                    color = Fore.LIGHTRED_EX
                print("    {:36s}{:s}{:s}{:s}".format(
                    domain['prefix'],
                    color,
                    domain['domain'],
                    Style.RESET_ALL
                ))
        print("-" * 80)


def print_ipv4_info():
    global data
    print_prefix_info(data['data']['prefixes']['ipv4'])


def print_ipv6_info():
    global data
    print_prefix_info(data['data']['prefixes']['ipv6'])


def asn_type(asn, pattern=re.compile(r"^(AS)?([0-9]+)$")):
    """
    Argparse type checker
    :param asn:         ASN passed by argparse
    :param pattern:     Allow ASXXXX or just XXXX
    :return:            Return ASN without the "AS" prefix
    """
    match = pattern.match(asn)
    if match:
        return match.group(2)
    else:
        raise argparse.ArgumentTypeError("ASN should be in AS1234 or 1234 format")


def _paint_green(str):
    """
    Encapsulate string with terminal color (green)
    :param str:
    :return:
    """
    return Fore.LIGHTGREEN_EX + str + Fore.RESET


def _paint_red(str):
    """
    Encapsulate string with terminal color (red)
    :param str:
    :return:
    """
    return Fore.LIGHTRED_EX + str + Fore.RESET


# Colorama init
init()

base_url = "https://stat.ripe.net/data/reverse-dns-consistency/data.json?resource=AS"

argv = argparse.ArgumentParser()
argv.add_argument("ASN", help="Autonomous system number", type=asn_type)

subargv = argv.add_mutually_exclusive_group()
subargv.add_argument("-4", "--ipv4", help="Show only IPv4 zones", action='store_true')
subargv.add_argument("-6", "--ipv6", help="Show only IPv6", action='store_true')
args = argv.parse_args()

asn = args.ASN

url = base_url + str(asn)

if args.ipv4:
    url += "&ipv6=0"
elif args.ipv6:
    url += "&ipv4=0"

try:
    response = urllib.request.urlopen(url)
    data = json.loads(response.read().decode('utf-8'))
    if 'status' in data:
        status = data['status']
        if status == 'ok':
            print("=" * 80)
            print("{:20s}:\t{:s}AS{:s}{:s}".format("Resource ASN", Style.BRIGHT, data['data']['resource'],
                                                   Style.RESET_ALL))
            ipv4_flare = Style.BRIGHT + Fore.LIGHTGREEN_EX if data['data']['ipv4'] else Style.DIM + Fore.RESET
            ipv6_flare = Style.BRIGHT + Fore.LIGHTGREEN_EX if data['data']['ipv6'] else Style.DIM + Fore.RESET
            print("{:20s}:\t{:s}{:s}{:s} {:s}{:s}{:s}".format(
                "Address family:",
                ipv4_flare, "IPv4", Style.RESET_ALL,
                ipv6_flare, "IPv6", Style.RESET_ALL
            ))

            print_request_info()

            if args.ipv4:
                print_ipv4_info()
            elif args.ipv6:
                print_ipv6_info()
            else:
                print_ipv4_info()
                print_ipv6_info()
            print("=" * 80)

except urllib.error.HTTPError:
    print("Request error")
